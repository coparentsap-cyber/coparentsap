// Service d'authentification renforc√© avec gestion RLS
import { supabase } from "./supabase"
import { simpleEmailService } from "./email-simple"
import { emailRetryService } from "./email-retry-service"

export interface AuthUser {
  id: string
  email: string
  phone?: string
  email_confirmed: boolean
  phone_confirmed: boolean
  created_at: string
}

export interface UserProfile {
  id: string
  user_id: string
  full_name: string
  email: string
  phone?: string
  invite_code: string
  photo_url?: string
  subscription_status: "trialing" | "active" | "inactive" | "canceled"
  is_trial: boolean
  trial_end_date?: string
  email_confirmed: boolean
  phone_confirmed: boolean
  stripe_customer_id?: string
  created_at: string
  updated_at: string
  enfants?: any[]
}

class EnhancedAuthService {
  private static instance: EnhancedAuthService

  static getInstance(): EnhancedAuthService {
    if (!EnhancedAuthService.instance) {
      EnhancedAuthService.instance = new EnhancedAuthService()
    }
    return EnhancedAuthService.instance
  }

  // Inscription avec gestion RLS renforc√©e
  async signUp(email: string, password: string, fullName: string) {
    try {
      console.log("üîß D√âBUT INSCRIPTION AVEC RLS CORRIG√â:", { email, fullName })

      if (!supabase) {
        throw new Error('Veuillez configurer Supabase en cliquant sur "Connect to Supabase"')
      }

      // V√©rifier d'abord la configuration email
      console.log("üìß V√âRIFICATION CONFIGURATION EMAIL...")
      const emailConfig = await this.verifyEmailConfiguration()
      console.log("üìä Configuration email:", emailConfig)

      // √âtape 1: Cr√©er le compte Supabase Auth
      console.log("üë§ Cr√©ation compte Supabase Auth...")
      const { data: authData, error: authError } = await supabase.auth.signUp({
        email,
        password,
        options: {
          data: {
            full_name: fullName,
          },
          emailRedirectTo: `${window.location.origin}/auth/callback`,
        },
      })

      if (authError) {
        console.error("‚ùå Erreur Supabase Auth:", authError)

        // Gestion sp√©cifique des erreurs d'email
        if (authError.message.includes("confirmation email")) {
          console.warn("‚ö†Ô∏è Erreur envoi email de confirmation - Continuons sans confirmation")
          // Ne pas bloquer l'inscription, continuer sans confirmation
        } else {
          throw authError
        }
      }

      if (!authData.user) {
        throw new Error("Aucun utilisateur cr√©√© par Supabase Auth")
      }

      console.log("‚úÖ Compte Supabase Auth cr√©√©:", authData.user.id)

      // √âtape 2: G√©n√©rer code unique
      const inviteCode = `CP-${authData.user.id.slice(-8).toUpperCase()}`
      console.log("üîë Code g√©n√©r√©:", inviteCode)

      // √âtape 3: Cr√©er profil avec les donn√©es directes de l'inscription
      console.log("üìù Cr√©ation profil utilisateur avec donn√©es directes...")

      const profileData = {
        user_id: authData.user.id,
        full_name: fullName,
        email: email,
        invite_code: inviteCode,
        is_trial: true,
        trial_end_date: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),
        subscription_status: "trialing" as const,
        email_confirmed: !authData.user.email_confirmed_at ? false : true,
        phone_confirmed: false,
      }

      console.log("üìã Donn√©es profil √† ins√©rer:", profileData)

      // Insertion directe avec la nouvelle policy RLS
      console.log("üìù Insertion profil avec policies RLS corrig√©es...")

      const { data: newProfile, error: profileError } = await supabase
        .from("users_profiles")
        .insert(profileData)
        .select()
        .single()

      if (profileError) {
        console.error("‚ùå ERREUR RLS CR√âATION PROFIL:", {
          message: profileError.message,
          code: profileError.code,
          details: profileError.details,
          hint: profileError.hint,
          userId: authData.user.id,
          authUid: authData.user.id,
        })

        // Diagnostic automatique en cas d'erreur RLS
        if (profileError.message.includes("row-level security")) {
          console.log("üîç DIAGNOSTIC RLS AUTOMATIQUE...")
          await this.diagnosePolicyIssues()
        }

        throw new Error(`Erreur RLS: ${profileError.message}`)
      }

      console.log("‚úÖ Profil cr√©√© avec succ√®s:", newProfile)

      // √âtape 4: Envoyer email de bienvenue
      console.log("üìß ENVOI EMAIL BIENVENUE...")

      try {
        // Utiliser le service complet avec v√©rifications
        const { comprehensiveEmailService } = await import("./email-comprehensive-service")

        // V√©rifier d'abord la configuration
        const configReport = await comprehensiveEmailService.runFullEmailDiagnostic()

        if (configReport.overallStatus === "success") {
          console.log("‚úÖ Configuration email valid√©e - Envoi en cours...")
          const emailResult = await simpleEmailService.sendWelcomeEmail(email, fullName, inviteCode)

          console.log("üìä R√âSULTAT EMAIL:", emailResult)

          if (emailResult && emailResult.success) {
            console.log("‚úÖ EMAIL ENVOY√â avec succ√®s")
          } else {
            console.warn("‚ö†Ô∏è EMAIL √âCHOU√â:", emailResult?.error || "Erreur inconnue")
          }
        } else {
          console.warn("‚ö†Ô∏è Configuration email non optimale - Mode d√©mo activ√©")

          // Afficher message informatif
          const fallbackMessage =
            `‚úÖ Compte cr√©√© avec succ√®s !\n\n` +
            `‚ö†Ô∏è Email de confirmation non envoy√© automatiquement\n` +
            `üìß Cause: Configuration email √† optimiser\n\n` +
            `üîë Votre code unique : ${inviteCode}\n` +
            `üë• Vous pouvez quand m√™me inviter votre co-parent !\n\n` +
            `üö® IMPORTANT : Si vous recevez un email plus tard,\n` +
            `üìß V√âRIFIEZ VOTRE DOSSIER SPAM !`

          console.warn("üìß Email bienvenue (mode fallback):", fallbackMessage)
        }
      } catch (emailError) {
        console.error("‚ùå ERREUR EMAIL (non bloquante):", emailError)
        // Ne pas bloquer l'inscription pour un probl√®me d'email
      }

      return {
        user: authData.user,
        profile: newProfile,
        session: authData.session,
        needsEmailConfirmation: !authData.session, // Si pas de session, confirmation requise
      }
    } catch (error: any) {
      console.error("‚ùå ERREUR CRITIQUE INSCRIPTION:", error)
      console.error("üìä Stack trace compl√®te:", error.stack)

      // Diagnostic automatique en cas d'erreur
      if (error.message.includes("row-level security")) {
        console.log("üîç DIAGNOSTIC RLS AUTOMATIQUE...")
        await this.diagnosePolicyIssues()
      }

      throw new Error(error.message)
    }
  }

  // V√©rifier la configuration email
  private async verifyEmailConfiguration() {
    try {
      if (!supabase) {
        return { configured: false, error: "Supabase non configur√©" }
      }

      const { data, error } = await supabase.rpc("test_email_configuration")

      if (error) {
        console.warn("‚ö†Ô∏è Impossible de v√©rifier config email:", error)
        return { configured: false, error: error.message }
      }

      return {
        configured: data?.resend_api_key_configured || false,
        fromEmailConfigured: data?.from_email_configured || false,
        timestamp: data?.timestamp,
      }
    } catch (error: any) {
      console.warn("‚ö†Ô∏è Erreur v√©rification config email:", error)
      return { configured: false, error: error.message }
    }
  }

  // Diagnostic automatique des probl√®mes de policies
  private async diagnosePolicyIssues() {
    try {
      console.log("üîç DIAGNOSTIC POLICIES RLS...")

      // Utiliser la nouvelle fonction de v√©rification
      const { data: rlsStatus, error: rlsError } = await supabase.rpc("verify_rls_policies", {
        table_name: "users_profiles",
      })

      if (rlsError) {
        console.error("‚ùå Erreur v√©rification RLS:", rlsError)
        return
      }

      console.log("üìä Statut RLS users_profiles:", rlsStatus)

      // V√©rifier aussi les invitations
      const { data: invitationsRLS } = await supabase.rpc("verify_rls_policies", {
        table_name: "invitations",
      })

      console.log("üìä Statut RLS invitations:", invitationsRLS)

      // V√©rifier l'utilisateur connect√©
      const { data: currentUser } = await supabase.auth.getUser()
      console.log("üë§ Utilisateur connect√©:", {
        id: currentUser.user?.id,
        email: currentUser.user?.email,
        aud: currentUser.user?.aud,
        role: currentUser.user?.role,
      })
    } catch (error) {
      console.error("‚ùå Erreur diagnostic policies:", error)
    }
  }

  // Test d'insertion avec logs d√©taill√©s
  async testProfileInsertion(userId: string, profileData: any) {
    try {
      console.log("üß™ TEST INSERTION PROFIL:", { userId, profileData })

      // V√©rifier l'utilisateur connect√©
      const { data: currentUser } = await supabase.auth.getUser()
      console.log("üë§ Utilisateur pour test:", {
        connected: !!currentUser.user,
        id: currentUser.user?.id,
        matches: currentUser.user?.id === userId,
      })

      if (!currentUser.user) {
        throw new Error("Aucun utilisateur connect√© pour test")
      }

      if (currentUser.user.id !== userId) {
        throw new Error(`ID utilisateur ne correspond pas: ${currentUser.user.id} vs ${userId}`)
      }

      // Tentative d'insertion
      const { data, error } = await supabase
        .from("users_profiles")
        .insert(profileData)
        .select()
        .single()

      if (error) {
        console.error("‚ùå Erreur insertion test:", {
          message: error.message,
          code: error.code,
          details: error.details,
          hint: error.hint,
        })
        throw error
      }

      console.log("‚úÖ Test insertion r√©ussi:", data)
      return data
    } catch (error: any) {
      console.error("‚ùå √âchec test insertion:", error)
      throw error
    }
  }

  // Connexion standard
  async signIn(email: string, password: string) {
    try {
      if (!supabase) {
        throw new Error('Veuillez configurer Supabase en cliquant sur "Connect to Supabase"')
      }

      const { data, error } = await supabase.auth.signInWithPassword({
        email,
        password,
      })

      if (error) throw error
      return data
    } catch (error: any) {
      console.error("Erreur connexion:", error)
      throw new Error(error.message)
    }
  }

  // D√©connexion
  async signOut() {
    try {
      if (!supabase) {
        localStorage.clear()
        return
      }

      const { error } = await supabase.auth.signOut()
      if (error) throw error
    } catch (error: any) {
      console.error("Erreur d√©connexion:", error)
      throw new Error(error.message)
    }
  }
}

export const enhancedAuthService = EnhancedAuthService.getInstance()
